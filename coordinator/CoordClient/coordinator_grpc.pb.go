// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: coordinator.proto

package CoordClient

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CoordinatorService_ReceiveCarInfo_FullMethodName = "/CoordinatorService/ReceiveCarInfo"
)

// CoordinatorServiceClient is the client API for CoordinatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorServiceClient interface {
	ReceiveCarInfo(ctx context.Context, in *CarInfoRequest, opts ...grpc.CallOption) (CoordinatorService_ReceiveCarInfoClient, error)
}

type coordinatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorServiceClient(cc grpc.ClientConnInterface) CoordinatorServiceClient {
	return &coordinatorServiceClient{cc}
}

func (c *coordinatorServiceClient) ReceiveCarInfo(ctx context.Context, in *CarInfoRequest, opts ...grpc.CallOption) (CoordinatorService_ReceiveCarInfoClient, error) {
	stream, err := c.cc.NewStream(ctx, &CoordinatorService_ServiceDesc.Streams[0], CoordinatorService_ReceiveCarInfo_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &coordinatorServiceReceiveCarInfoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type CoordinatorService_ReceiveCarInfoClient interface {
	Recv() (*CarInfoResponse, error)
	grpc.ClientStream
}

type coordinatorServiceReceiveCarInfoClient struct {
	grpc.ClientStream
}

func (x *coordinatorServiceReceiveCarInfoClient) Recv() (*CarInfoResponse, error) {
	m := new(CarInfoResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// CoordinatorServiceServer is the server API for CoordinatorService service.
// All implementations must embed UnimplementedCoordinatorServiceServer
// for forward compatibility
type CoordinatorServiceServer interface {
	ReceiveCarInfo(*CarInfoRequest, CoordinatorService_ReceiveCarInfoServer) error
	mustEmbedUnimplementedCoordinatorServiceServer()
}

// UnimplementedCoordinatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServiceServer struct {
}

func (UnimplementedCoordinatorServiceServer) ReceiveCarInfo(*CarInfoRequest, CoordinatorService_ReceiveCarInfoServer) error {
	return status.Errorf(codes.Unimplemented, "method ReceiveCarInfo not implemented")
}
func (UnimplementedCoordinatorServiceServer) mustEmbedUnimplementedCoordinatorServiceServer() {}

// UnsafeCoordinatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServiceServer will
// result in compilation errors.
type UnsafeCoordinatorServiceServer interface {
	mustEmbedUnimplementedCoordinatorServiceServer()
}

func RegisterCoordinatorServiceServer(s grpc.ServiceRegistrar, srv CoordinatorServiceServer) {
	s.RegisterService(&CoordinatorService_ServiceDesc, srv)
}

func _CoordinatorService_ReceiveCarInfo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(CarInfoRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(CoordinatorServiceServer).ReceiveCarInfo(m, &coordinatorServiceReceiveCarInfoServer{stream})
}

type CoordinatorService_ReceiveCarInfoServer interface {
	Send(*CarInfoResponse) error
	grpc.ServerStream
}

type coordinatorServiceReceiveCarInfoServer struct {
	grpc.ServerStream
}

func (x *coordinatorServiceReceiveCarInfoServer) Send(m *CarInfoResponse) error {
	return x.ServerStream.SendMsg(m)
}

// CoordinatorService_ServiceDesc is the grpc.ServiceDesc for CoordinatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CoordinatorService",
	HandlerType: (*CoordinatorServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ReceiveCarInfo",
			Handler:       _CoordinatorService_ReceiveCarInfo_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "coordinator.proto",
}
