// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.26.1
// source: services.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CarClientService_SendRoute_FullMethodName     = "/CarClientService/SendRoute"
	CarClientService_DiscoverPeers_FullMethodName = "/CarClientService/DiscoverPeers"
)

// CarClientServiceClient is the client API for CarClientService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CarClientServiceClient interface {
	SendRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteResponse, error)
	DiscoverPeers(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error)
}

type carClientServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCarClientServiceClient(cc grpc.ClientConnInterface) CarClientServiceClient {
	return &carClientServiceClient{cc}
}

func (c *carClientServiceClient) SendRoute(ctx context.Context, in *Route, opts ...grpc.CallOption) (*RouteResponse, error) {
	out := new(RouteResponse)
	err := c.cc.Invoke(ctx, CarClientService_SendRoute_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *carClientServiceClient) DiscoverPeers(ctx context.Context, in *DiscoverRequest, opts ...grpc.CallOption) (*DiscoverResponse, error) {
	out := new(DiscoverResponse)
	err := c.cc.Invoke(ctx, CarClientService_DiscoverPeers_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CarClientServiceServer is the server API for CarClientService service.
// All implementations must embed UnimplementedCarClientServiceServer
// for forward compatibility
type CarClientServiceServer interface {
	SendRoute(context.Context, *Route) (*RouteResponse, error)
	DiscoverPeers(context.Context, *DiscoverRequest) (*DiscoverResponse, error)
	mustEmbedUnimplementedCarClientServiceServer()
}

// UnimplementedCarClientServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCarClientServiceServer struct {
}

func (UnimplementedCarClientServiceServer) SendRoute(context.Context, *Route) (*RouteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendRoute not implemented")
}
func (UnimplementedCarClientServiceServer) DiscoverPeers(context.Context, *DiscoverRequest) (*DiscoverResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DiscoverPeers not implemented")
}
func (UnimplementedCarClientServiceServer) mustEmbedUnimplementedCarClientServiceServer() {}

// UnsafeCarClientServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CarClientServiceServer will
// result in compilation errors.
type UnsafeCarClientServiceServer interface {
	mustEmbedUnimplementedCarClientServiceServer()
}

func RegisterCarClientServiceServer(s grpc.ServiceRegistrar, srv CarClientServiceServer) {
	s.RegisterService(&CarClientService_ServiceDesc, srv)
}

func _CarClientService_SendRoute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Route)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarClientServiceServer).SendRoute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarClientService_SendRoute_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarClientServiceServer).SendRoute(ctx, req.(*Route))
	}
	return interceptor(ctx, in, info, handler)
}

func _CarClientService_DiscoverPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DiscoverRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CarClientServiceServer).DiscoverPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CarClientService_DiscoverPeers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CarClientServiceServer).DiscoverPeers(ctx, req.(*DiscoverRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CarClientService_ServiceDesc is the grpc.ServiceDesc for CarClientService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CarClientService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CarClientService",
	HandlerType: (*CarClientServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendRoute",
			Handler:    _CarClientService_SendRoute_Handler,
		},
		{
			MethodName: "DiscoverPeers",
			Handler:    _CarClientService_DiscoverPeers_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}

const (
	CoordinatorService_SendCarInfo_FullMethodName = "/CoordinatorService/SendCarInfo"
)

// CoordinatorServiceClient is the client API for CoordinatorService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CoordinatorServiceClient interface {
	SendCarInfo(ctx context.Context, in *CarInfo, opts ...grpc.CallOption) (*CarInfoResponse, error)
}

type coordinatorServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCoordinatorServiceClient(cc grpc.ClientConnInterface) CoordinatorServiceClient {
	return &coordinatorServiceClient{cc}
}

func (c *coordinatorServiceClient) SendCarInfo(ctx context.Context, in *CarInfo, opts ...grpc.CallOption) (*CarInfoResponse, error) {
	out := new(CarInfoResponse)
	err := c.cc.Invoke(ctx, CoordinatorService_SendCarInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CoordinatorServiceServer is the server API for CoordinatorService service.
// All implementations must embed UnimplementedCoordinatorServiceServer
// for forward compatibility
type CoordinatorServiceServer interface {
	SendCarInfo(context.Context, *CarInfo) (*CarInfoResponse, error)
	mustEmbedUnimplementedCoordinatorServiceServer()
}

// UnimplementedCoordinatorServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCoordinatorServiceServer struct {
}

func (UnimplementedCoordinatorServiceServer) SendCarInfo(context.Context, *CarInfo) (*CarInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCarInfo not implemented")
}
func (UnimplementedCoordinatorServiceServer) mustEmbedUnimplementedCoordinatorServiceServer() {}

// UnsafeCoordinatorServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CoordinatorServiceServer will
// result in compilation errors.
type UnsafeCoordinatorServiceServer interface {
	mustEmbedUnimplementedCoordinatorServiceServer()
}

func RegisterCoordinatorServiceServer(s grpc.ServiceRegistrar, srv CoordinatorServiceServer) {
	s.RegisterService(&CoordinatorService_ServiceDesc, srv)
}

func _CoordinatorService_SendCarInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CarInfo)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CoordinatorServiceServer).SendCarInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CoordinatorService_SendCarInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CoordinatorServiceServer).SendCarInfo(ctx, req.(*CarInfo))
	}
	return interceptor(ctx, in, info, handler)
}

// CoordinatorService_ServiceDesc is the grpc.ServiceDesc for CoordinatorService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CoordinatorService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "CoordinatorService",
	HandlerType: (*CoordinatorServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendCarInfo",
			Handler:    _CoordinatorService_SendCarInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services.proto",
}
